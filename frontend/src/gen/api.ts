/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
import { Collection, Image } from "types/model";
export interface paths {
  "/translate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["translate"];
    /** Delete Artifact */
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/get_images": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get_images"];
    put?: never;
    post?: never;
    /** Delete Artifact */
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/delete_image": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["delete_image"];
    put?: never;
    post?: never;
    /** Delete Artifact */
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/create_collection": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["create_collection"];
    /** Delete Artifact */
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/edit_collection": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["edit_collection"];
    /** Delete Artifact */
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/get_collection": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get_collection"];
    put?: never;
    post?: never;
    /** Delete Artifact */
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/get_collections": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get_collections"];
    put?: never;
    post?: never;
    /** Delete Artifact */
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/delete_collection": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["delete_collections"];
    put?: never;
    post?: never;
    /** Delete Artifact */
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/publish_collection": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["publish_collection"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/public_collections": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["public_collections"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/create_subscription": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["create_subscription"];
    /** Delete Artifact */
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get User Info Endpoint */
    get: operations["get_user_info_endpoint_users_me_get"];
    /** Update Profile */
    put: operations["update_profile_users_me_put"];
    post?: never;
    /** Delete User Endpoint */
    delete: operations["delete_user_endpoint_users_me_delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Logout User Endpoint */
    delete: operations["logout_user_endpoint_users_logout_delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/signup": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register User */
    post: operations["register_user_users_signup_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/signin": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login User */
    post: operations["login_user_users_login_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** ArtifactUrls */
    ArtifactUrls: {
      /** Small */
      small?: string | null;
      /** Large */
      large: string;
    };
    /** AuthResponse */
    AuthResponse: {
      /** Api Key */
      api_key: string;
    };
    /** Body_pull_onshape_document_onshape_pull__listing_id__get */
    Body_pull_onshape_document_onshape_pull__listing_id__get: {
      /** Suffix To Joint Effort */
      suffix_to_joint_effort?: {
        [key: string]: number;
      } | null;
      /** Suffix To Joint Velocity */
      suffix_to_joint_velocity?: {
        [key: string]: number;
      } | null;
    };
    /** Body_upload_artifacts_upload__listing_id__post */
    Body_upload_artifacts_upload__listing_id__post: {
      /** Files */
      files: string[];
    };
    /** ClientIdResponse */
    ClientIdResponse: {
      /** Client Id */
      client_id: string;
    };
    /** DeleteTokenResponse */
    DeleteTokenResponse: {
      /** Message */
      message: string;
    };
    /** DumpListingsResponse */
    DumpListingsResponse: {
      /** Listings */
      listings: components["schemas"]["Listing"][];
    };
    /** EmailSignUpRequest */
    EmailSignUpRequest: {
      /**
       * Email
       * Format: email
       */
      email: string;
    };
    /** EmailSignUpResponse */
    EmailSignUpResponse: {
      /** Message */
      message: string;
    };

    /** GetBatchListingsResponse */
    GetBatchListingsResponse: {
      /** Listings */
      listings: components["schemas"]["ListingInfoResponse"][];
    };
    /** GetListingResponse */
    GetListingResponse: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string | null;
      /** Child Ids */
      child_ids: string[];
      /** Tags */
      tags: string[];
      /** Onshape Url */
      onshape_url: string | null;
      /** Can Edit */
      can_edit: boolean;
      /** Created At */
      created_at: number;
      /** Views */
      views: number;
      /** Score */
      score: number;
      /** User Vote */
      user_vote: boolean | null;
      /** Creator Id */
      creator_id: string;
      /** Creator Name */
      creator_name: string | null;
    };
    /** GetTokenResponse */
    GetTokenResponse: {
      /** Id */
      id: string;
      /** Email */
      email: string;
    };
    /** GithubAuthRequest */
    GithubAuthRequest: {
      /** Code */
      code: string;
    };

    CollectionCreateRequest: {
      title: string;
      description: string;
    };
    CollectionPublishRequest: {
      id: string;
      flag: boolean;
    };
    SubscriptionRequest: {
      payment_method_id: string;
      email: string;
      name: string;
    };
    SubscriptionResponse: {
      success: boolean;
      error: string;
    };
    /** GithubAuthResponse */
    GithubAuthResponse: {
      /** Api Key */
      api_key: string;
    };
    /** GoogleLogin */
    GoogleLogin: {
      /** Token */
      token: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** KeysResponseItem */
    KeysResponseItem: {
      /** Token */
      token: string;
      /** Permissions */
      permissions: ("read" | "write" | "admin")[] | null;
    };
    /** ListArtifactsResponse */
    ListArtifactsResponse: {
      /** Artifacts */
      artifacts: components["schemas"]["SingleArtifactResponse"][];
    };
    /** ListKeysResponse */
    ListKeysResponse: {
      /** Keys */
      keys: components["schemas"]["KeysResponseItem"][];
    };
    /** ListListingsResponse */
    ListListingsResponse: {
      /** Listing Ids */
      listing_ids: string[];
      /**
       * Has Next
       * @default false
       */
      has_next: boolean;
    };
    /**
     * Listing
     * @description Defines a recursively-defined listing.
     *
     *     Listings can have sub-listings with their component parts. They can also
     *     have associated user-uploaded artifacts like images and URDFs.
     */
    Listing: {
      /** Id */
      id: string;
      /** User Id */
      user_id: string;
      /** Created At */
      created_at: number;
      /** Updated At */
      updated_at: number;
      /** Name */
      name: string;
      /** Child Ids */
      child_ids: string[];
      /** Description */
      description?: string | null;
      /** Onshape Url */
      onshape_url?: string | null;
      /**
       * Views
       * @default 0
       */
      views: number;
      /**
       * Upvotes
       * @default 0
       */
      upvotes: number;
      /**
       * Downvotes
       * @default 0
       */
      downvotes: number;
      /**
       * Score
       * @default 0
       */
      score: number;
    };
    /** ListingInfoResponse */
    ListingInfoResponse: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string | null;
      /** Child Ids */
      child_ids: string[];
      /** Image Url */
      image_url: string | null;
      /** Onshape Url */
      onshape_url: string | null;
      /** Created At */
      created_at: number;
      /** Views */
      views: number;
      /** Score */
      score: number;
      /** User Vote */
      user_vote: boolean | null;
    };
    /** LoginRequest */
    LoginRequest: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
    };
    /** LoginResponse */
    LoginResponse: {
      /** User Id */
      user_id: string;
      /** Token */
      token: string;
    };
    /** MyUserInfoResponse */
    MyUserInfoResponse: {
      /** User Id */
      user_id: string;
      /** Email */
      email: string;
      /** Github Id */
      github_id: string | null;
      /** Google Id */
      google_id: string | null;
      /** Permissions */
      permissions: ("is_admin" | "is_mod")[] | null;
      /** First Name */
      first_name: string | null;
      /** Last Name */
      last_name: string | null;
      /** Name */
      name: string | null;
      /** Bio */
      bio: string | null;
    };
    /** NewKeyRequest */
    NewKeyRequest: {
      /**
       * Readonly
       * @default true
       */
      readonly: boolean;
    };
    /** NewKeyResponse */
    NewKeyResponse: {
      /** User Id */
      user_id: string;
      key: components["schemas"]["KeysResponseItem"];
    };
    /** NewListingRequest */
    NewListingRequest: {
      /** Name */
      name: string;
      /** Child Ids */
      child_ids: string[];
      /** Description */
      description: string | null;
    };
    /** NewListingResponse */
    NewListingResponse: {
      /** Listing Id */
      listing_id: string;
    };
    /** PublicUserInfoResponseItem */
    PublicUserInfoResponseItem: {
      /** Id */
      id: string;
      /** Email */
      email: string;
      /** Permissions */
      permissions?: ("is_admin" | "is_mod")[] | null;
      /** Created At */
      created_at?: number | null;
      /** Updated At */
      updated_at?: number | null;
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      /** Name */
      name?: string | null;
      /** Bio */
      bio?: string | null;
    };
    /** PublicUsersInfoResponse */
    PublicUsersInfoResponse: {
      /** Users */
      users: components["schemas"]["PublicUserInfoResponseItem"][];
    };
    /** SetModeratorRequest */
    SetModeratorRequest: {
      /** User Id */
      user_id: string;
      /** Is Mod */
      is_mod: boolean;
    };
    /** SetRequest */
    SetRequest: {
      /** Onshape Url */
      onshape_url: string | null;
    };
    /** SingleArtifactResponse */
    SingleArtifactResponse: {
      /** Artifact Id */
      artifact_id: string;
      /** Listing Id */
      listing_id: string;
      /** Name */
      name: string;
      /** Artifact Type */
      artifact_type:
        | "image"
        | ("urdf" | "mjcf")
        | ("stl" | "obj" | "dae" | "ply")
        | ("tgz" | "zip");
      /** Description */
      description: string | null;
      /** Timestamp */
      timestamp: number;
      urls: components["schemas"]["ArtifactUrls"];
    };
    /**
     * SortOption
     * @enum {string}
     */
    SortOption: "newest" | "most_viewed" | "most_upvoted";
    /** UpdateArtifactRequest */
    UpdateArtifactRequest: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
    };
    /** UpdateListingRequest */
    UpdateListingRequest: {
      /** Name */
      name?: string | null;
      /** Child Ids */
      child_ids?: string[] | null;
      /** Description */
      description?: string | null;
      /** Tags */
      tags?: string[] | null;
    };
    /** UpdateUserRequest */
    UpdateUserRequest: {
      /** Email */
      email?: string | null;
      /** Password */
      password?: string | null;
      /** Github Id */
      github_id?: string | null;
      /** Google Id */
      google_id?: string | null;
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      /** Name */
      name?: string | null;
      /** Bio */
      bio?: string | null;
    };
    /** UploadArtifactResponse */
    UploadArtifactResponse: {
      /** Artifacts */
      artifacts: components["schemas"]["SingleArtifactResponse"][];
    };
    /** UserInfoResponseItem */
    UserInfoResponseItem: {
      token: string;
      username: string;
      email: string;
      is_subscription: boolean;
      is_auth: boolean;
    };
    /**
     * UserPublic
     * @description Defines public user model for frontend.
     *
     *     Omits private/sesnsitive user fields. Is the return type for
     *     retrieving user data on frontend (for public profile pages, etc).
     */
    UserPublic: {
      /** Id */
      id: string;
      /** Email */
      email: string;
      /** Permissions */
      permissions?: ("is_admin" | "is_mod")[] | null;
      /** Created At */
      created_at: number;
      /** Updated At */
      updated_at?: number | null;
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      /** Name */
      name?: string | null;
      /** Bio */
      bio?: string | null;
    };
    /** UserSignup */
    UserSignup: {
      username: string;
      /** Email */
      email: string;
      /** Password */
      password: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  read_root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  artifact_url_artifacts_url__artifact_type___listing_id___name__get: {
    parameters: {
      query?: {
        size?: "small" | "large";
      };
      header?: never;
      path: {
        artifact_type:
          | "image"
          | ("urdf" | "mjcf")
          | ("stl" | "obj" | "dae" | "ply")
          | ("tgz" | "zip");
        listing_id: string;
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_artifact_info_artifacts_info__artifact_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        artifact_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SingleArtifactResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  list_artifacts_artifacts_list__listing_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        listing_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListArtifactsResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  upload_artifacts_upload__listing_id__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        listing_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_artifacts_upload__listing_id__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UploadArtifactResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  edit_artifact_artifacts_edit__artifact_id__put: {
    parameters: {
      query: {
        id: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateArtifactRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": boolean;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_artifact_artifacts_delete__artifact_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        artifact_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": boolean;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_signup_token_email_signup_create_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailSignUpRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EmailSignUpResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  edit_collection: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": Collection;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": never;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_collection: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CollectionCreateRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Collection;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_collection: {
    parameters: {
      query: { id: string };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Collection;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_collections: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Array<Collection>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_collections: {
    parameters: {
      query: { id: string };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": never;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  publish_collection: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CollectionPublishRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": never;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  public_collections: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Array<Collection>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  translate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": Array<string>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Array<Image>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_images: {
    parameters: {
      query: { collection_id: string };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Array<Image>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_image: {
    parameters: {
      query: { id: string };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": never;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };

  create_subscription: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscriptionRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_signup_token_email_signup_get__id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetTokenResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_signup_token_email_signup_delete__id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeleteTokenResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  new_key_keys_new_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewKeyRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NewKeyResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  list_keys_keys_list_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListKeysResponse"];
        };
      };
    };
  };
  delete_key_keys_delete__key__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  list_listings_listings_search_get: {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        page?: number;
        /** @description Search query string */
        search_query?: string;
        /** @description Sort option for listings */
        sort_by?: components["schemas"]["SortOption"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListListingsResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_batch_listing_info_listings_batch_get: {
    parameters: {
      query: {
        /** @description List of part ids */
        ids: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetBatchListingsResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  dump_listings_listings_dump_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DumpListingsResponse"];
        };
      };
    };
  };
  list_user_listings_listings_user__id__get: {
    parameters: {
      query: {
        /** @description Page number for pagination */
        page: number;
        /** @description Search query string */
        search_query?: string;
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListListingsResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  list_my_listings_listings_me_get: {
    parameters: {
      query: {
        /** @description Page number for pagination */
        page: number;
        /** @description Search query string */
        search_query?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListListingsResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  add_listing_listings_add_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewListingRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NewListingResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_listing_listings_delete__listing_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        listing_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": boolean;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  edit_listing_listings_edit__id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateListingRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": boolean;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_listing_listings__id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetListingResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  increment_view_count_listings__id__view_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  vote_listing_listings__id__vote_post: {
    parameters: {
      query: {
        /** @description True for upvote, False for downvote */
        upvote: boolean;
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  remove_vote_listings__id__vote_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  set_onshape_document_onshape_set__listing_id__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        listing_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  pull_onshape_document_onshape_pull__listing_id__get: {
    parameters: {
      query?: {
        token?: string | null;
        default_prismatic_joint_effort?: number;
        default_prismatic_joint_velocity?: number;
        default_revolute_joint_effort?: number;
        default_revolute_joint_velocity?: number;
        voxel_size?: number;
        convex_collision_meshes?: boolean;
        add_mjcf?: boolean;
      };
      header?: never;
      path: {
        listing_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Body_pull_onshape_document_onshape_pull__listing_id__get"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_user_info_endpoint_users_me_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserInfoResponseItem"];
        };
      };
    };
  };
  update_profile_users_me_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserInfoResponseItem"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_user_endpoint_users_me_delete: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  logout_user_endpoint_users_logout_delete: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  register_user_users_signup_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserSignup"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserInfoResponseItem"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  login_user_users_login_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserInfoResponseItem"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_users_batch_endpoint_users_batch_get: {
    parameters: {
      query: {
        ids: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PublicUsersInfoResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_users_public_batch_endpoint_users_public_batch_get: {
    parameters: {
      query: {
        ids: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PublicUsersInfoResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_user_info_by_id_endpoint_users__id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserInfoResponseItem"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_my_public_user_info_endpoint_users_public_me_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
    };
  };
  get_public_user_info_by_id_endpoint_users_public__id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  validate_api_key_endpoint_users_validate_api_key_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  github_client_id_endpoint_users_github_client_id_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientIdResponse"];
        };
      };
    };
  };
  github_code_users_github_code_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GithubAuthRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GithubAuthResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  google_client_id_endpoint_users_google_client_id_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientIdResponse"];
        };
      };
    };
  };
  google_login_endpoint_users_google_login_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleLogin"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  set_moderator_users_set_moderator_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetModeratorRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserPublic"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
